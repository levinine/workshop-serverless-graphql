service: workshop-serverless-graphql
app: workshop-serverless-graphql

plugins:
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-offline-sqs
  - serverless-offline
  - serverless-dynamodb-local

provider:
  name: aws
  runtime: nodejs12.x
  stackName: workshop-serverless-graphql-${self:provider.stage}

  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  environment:
    ORIGIN_BUCKET_NAME: ${self:provider.stackName}-origin-bucket
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    QUEUE_NAME: ${self:custom.ingestQueue}
    ENDPOINT: ${self:custom.serverless-offline-sqs.endpoint}
    QUEUE: !Ref IngestQueue
    IMAGE_URL: https://cryptocompare.com
    API_URL: https://min-api.cryptocompare.com/
    DATA_TABLE: ${self:custom.dataTableName}
    REMOTE_UID: !Ref "ApiGatewayRestApi"
    REMOTE_URL: {
      "Fn::Join":
        [
          "",
          [" https://",
           { "Ref": "ApiGatewayRestApi" },
           ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/"
          ]
        ]
    }
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sqs:*
      Resource:
        Fn::GetAtt: [ IngestQueue, Arn ]
    - Effect: Allow
      Action:
        - s3:*
      Resource:
        Fn::GetAtt: [ OriginBucket, Arn ]
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - Fn::GetAtt: [ DataTable, Arn ]
        - Fn::Join:
            - "/"
            - - { "Fn::GetAtt": [ DataTable, Arn ] }
              - "index/*"

custom:
  dataTableName: data-${self:provider.stage}
  ingestQueue: ${self:service}-ingest-${self:provider.stage}
  serverless-offline-sqs:
    autoCreate: true
    apiVersion: '2012-11-05'
    endpoint: http://0.0.0.0:9324
    region: eu-west-1
    accessKeyId: root
    secretAccessKey: root
    skipCacheInvalidation: false
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true

functions:
  pull-data:
    name: ${self:provider.stackName}-pull-data
    handler: src/functions/pull-data.handler
    events:
      - schedule: rate(1 hour)
      - http:
          path: pull-data
          method: get
          cors: true
  ingest:
    name: ${self:provider.stackName}-ingest
    handler: src/functions/ingest.handler
    events:
      - http:
          path: ingest
          method: post
          cors: true
  process:
    name: ${self:provider.stackName}-process
    handler: src/functions/process.handler
    events:
      - sqs:
          queueName: IngestQueue
          arn:
            Fn::GetAtt:
              - IngestQueue
              - Arn
  expose:
    name: ${self:provider.stackName}-expose
    handler: src/functions/expose.handler
    events:
      - http:
          path: expose
          method: get
          cors: true
  graphql:
    name: ${self:provider.stackName}-graphql
    handler: src/functions/graphql.handler
    events:
      - http:
          path: graphql
          method: post
          cors: true
      - http:
          path: graphql
          method: get
          cors: true
#  origin-response:
#    name: ${self:provider.stackName}-origin-response
#    handler: src/functions/origin-response.handler
#    events:
#      - cloudFront:
#          eventType: origin-response
#          origin: s3://${self:provider.environment.ORIGIN_BUCKET_NAME}.s3.amazonaws.com/files
#  viewer-request:
#    name: ${self:provider.stackName}-viewer-request
#    handler: src/functions/viewer-request.handler
#    events:
#      - cloudFront:
#          eventType: viewer-request
#          origin: s3://${self:provider.environment.ORIGIN_BUCKET_NAME}.s3.amazonaws.com/files
  store-to-s3:
    name: ${self:provider.stackName}-store-to-s3
    handler: src/functions/store-to-s3.handler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [DataTable, StreamArn]

resources:
  - ${file(resources/origin-bucket.yml)}
  - ${file(resources/resources.yml)}
